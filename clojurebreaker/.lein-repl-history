(doc repeatedly)
(doc vec)
(vec '(1 2 3))
(vec '((1 2 3)))
(map vec '((1 2 3)))
(apply vec '((1 2 3)))
(in-ns 'clojurebreaker.models.game)
(dotimes [_ 5] (println (create)))
(use )
(clojure.core/use 'clojure.core )
(dotimes [_ 5] (println (create)))
(use :reload 'clojurebreaker.models.game)
(dotimes [_ 5] (println (create)))
(create)
(doc defpartial)
(ns clojurebreaker.views.welcome)
(board)
(in-ns 'clojurebreaker.views.welcome)
(board)
(use :reload-all 'clojurebreaker.views.welcome)
(board)
(use :reload-all 'clojurebreaker.views.welcome)
(use :reload 'clojurebreaker.views.welcome)
(use :reload-all 'clojurebreaker.views.welcome)
(require 'clojure.math.combinatorics
)
(require 'clojure.main)
(use :reload-all 'clojurebreaker.views.welcome)
(doc session/flash-put!)
(source session/flash-put!)
(require '[noir.session :as session])
(source session/flash-put!)
